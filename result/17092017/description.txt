Conv1: 5x5x30
Conv2: 5x5x20
Conv3: 5x5x20 + Before Conv2
FC3: 30
FC4: 15
FC5: 7
---------------
Train: 98% 
Test: 65%

def model(self,images,reuse=None):
        TOWER_NAME = 'tower'

        conv1_node = 30
        conv1_shape = [5,5,3,conv1_node]
        
        conv2_node = 20
        conv2_shape = [5,5,conv1_node,conv2_node]

        conv3_node = 20
        conv3_shape = [5,5,conv2_node,conv3_node]

        

        local4_node = 30
        local5_node = 15

        initializer = tf.truncated_normal_initializer(mean=0.0,stddev=0.1)

        conv1 = self.conv_layer(images,shape=conv1_shape,num_filter=conv1_node,initializer=initializer,
                                        name='conv1')
        pool1 = tf.nn.max_pool(conv1, ksize=[1,3,3,1], strides=[1,2,2,1],padding='SAME', name='pool1')
        norm1 = tf.nn.lrn(pool1, 4, bias=1.0, alpha=0.001 / 9.0, beta=0.75,name='norm1')

        conv2 = self.conv_layer(norm1,shape=conv2_shape,num_filter=conv2_node,initializer=initializer,
                                        name='conv2')
        pool2 = tf.nn.max_pool(conv2, ksize=[1,3,3,1], strides=[1,2,2,1],padding='SAME', name='pool2')
        norm2 = tf.nn.lrn(pool2, 4, bias=1.0, alpha=0.001 / 9.0, beta=0.75,name='norm2')

        conv3 = self.conv_layer(norm2,shape=conv3_shape,num_filter=conv3_node,initializer=initializer,
                                        name='conv3')
        pool3 = tf.nn.max_pool(conv3, ksize=[1,3,3,1], strides=[1,2,2,1],padding='SAME', name='pool3')
        norm3 = tf.nn.lrn(pool2, 4, bias=1.0, alpha=0.001 / 9.0, beta=0.75,name='norm3')

        normX3 = tf.add(norm3,norm2)

        fc3 = self.fc_layer(normX3,shape=[local4_node],num_node=local4_node,initializer=initializer,
                                bias_initializer=initializer,wd=4e-5,
                                name='fc3',reshape=True)
        
        fc4 = self.fc_layer(fc3,shape=[local4_node,local5_node],num_node=local5_node,initializer=initializer,
                                bias_initializer=initializer,wd=4e-4,
                                name='fc4')

        softmax_linear = self.fc_layer(fc4,shape=[local5_node, self.NUM_CLASSES],num_node=self.NUM_CLASSES,
                                            initializer=tf.truncated_normal_initializer(stddev=1/192.0),
                                            bias_initializer=tf.constant_initializer(0.1),wd=4e-3,
                                            name='softmax_linear',
                                            relu=False)
       
        return softmax_linear
